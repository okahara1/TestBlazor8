@page "/stocklist"
@attribute [Authorize]
@using TestBlazor8.Shared
@using Microsoft.AspNetCore.WebUtilities
@using System.Web
@inject NavigationManager NavigationManager
@inject HttpClient Http

<PageTitle>Stock List</PageTitle>

<h1>在庫一覧</h1>

<EditForm Model="condition">
    <div class="row">
        <div class="form-group col-xs-2 m-1">
            <label>倉庫</label>
            <InputText id="inputWarehouseId" class="form-control" @bind-Value="condition.CdWarehouseId"></InputText>
        </div>
        <div class="form-group col-xs-2 m-1">
            <label>ロケーション</label>
            <InputText id="inputLocation" class="form-control" @bind-Value="condition.CdLocation"></InputText>
        </div>
        <div class="form-group col-xs-2 m-1">
            <label>JAN</label>
            <InputText id="inputJan" class="form-control" @bind-Value="condition.CdJan"></InputText>
        </div>
        <div class="form-group col-xs-2 m-1">
            <label>品番</label>
            <InputText id="inputProductNumber" class="form-control" @bind-Value="condition.CdProductNumber"></InputText>
        </div>
        <div class="form-group col-xs-2 m-1">
            <label>品名</label>
            <InputText id="inputProductName" class="form-control" @bind-Value="condition.CdProductName"></InputText>
        </div>
        <div class="form-group col-xs-2 m-1">
            <label>状態</label>
            <InputText id="inputStatusId" class="form-control" @bind-Value="condition.CdStatusId"></InputText>
        </div>
    </div>
    <div class="row">
        <div class="form-group m-1">
            <button class="btn btn-primary btn-block" @onclick="Navigate">検索</button>
        </div>
    </div>
</EditForm>

@if (stocklists == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>倉庫</th>
                <th>ロケーション</th>
                <th>JAN</th>
                <th>品番</th>
                <th>品名</th>
                <th>状態</th>
                <th>格納</th>
                <th>引当</th>
                <th>予定</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var stock in stocklists)
            {
                <tr>
                    <td>@stock.Id</td>
                    <td>@stock.Location</td>
                    <td>@stock.Jan</td>
                    <td>@stock.ProductNumber</td>
                    <td>@stock.ProductName</td>
                    <td>@stock.StatusId</td>
                    <td>@stock.StockCount</td>
                    <td>@stock.StockSchedule</td>
                    <td>@stock.ReserveCount</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private StockList[] stocklists;

    private StockListSearchCondition condition = new StockListSearchCondition();

    protected override async Task OnInitializedAsync()
    {
        //forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("api/SampleData/WeatherForecasts");


        stocklists = await Http.GetFromJsonAsync<StockList[]>("api/StockList/GetStockList?id=" + @condition.CdWarehouseId);

    }

    private void HandleLocationChanged(object sender, LocationChangedEventArgs args)
    {
        GetQueryString();

        InvokeAsync(async() =>
        {
            await Search();
        });
    }

    private void Navigate()
    {
        Dictionary<string, string> queryParams = CreateQueryParam();

        NavigationManager.NavigateTo(QueryHelpers.AddQueryString("stocklist", queryParams));
    }

    private async Task Search()
    {
        Dictionary<string, string> queryParams = CreateQueryParam();

        stocklists = await Http.GetFromJsonAsync<StockList[]>(QueryHelpers.AddQueryString("api/StockList/GetStockList", queryParams));

        StateHasChanged();
    }

    private void GetQueryString()
    {
        var uriQuery = HttpUtility.ParseQueryString(new Uri(NavigationManager.Uri).Query);
        condition.CdWarehouseId = uriQuery.Get("warehouseid");
        condition.CdLocation = uriQuery.Get("location");
        condition.CdJan = uriQuery.Get("jan");
        condition.CdProductNumber = uriQuery.Get("productnumber");
        condition.CdProductName = uriQuery.Get("productname");
        condition.CdStatusId = uriQuery.Get("statusid");
    }

    private Dictionary<string, string> CreateQueryParam()
    {
        var queryParams = new Dictionary<string, string>();
        if (!string.IsNullOrWhiteSpace(condition.CdWarehouseId)) { queryParams.Add("warehouseid", condition.CdWarehouseId); }
        if (!string.IsNullOrWhiteSpace(condition.CdLocation)) { queryParams.Add("location", condition.CdLocation); }
        if (!string.IsNullOrWhiteSpace(condition.CdJan)) { queryParams.Add("jan", condition.CdJan); }
        if (!string.IsNullOrWhiteSpace(condition.CdProductNumber)) { queryParams.Add("productnumber", condition.CdProductNumber); }
        if (!string.IsNullOrWhiteSpace(condition.CdProductName)) { queryParams.Add("productname", condition.CdProductName); }
        if (!string.IsNullOrWhiteSpace(condition.CdStatusId)) { queryParams.Add("statusid", condition.CdStatusId); }

        return queryParams;
    }
}
